apply plugin: "java"

version '1.0'

//compile java 16 code, targeting java 8

sourceSets.main.java.srcDirs = ["src"]

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories{
    mavenCentral()
    maven{ url = uri("https://maven.xpdustry.com/mindustry") }
    maven{ url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository' }
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v150'
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    implementation "org.telegram:telegrambots:6.9.7.1"
    implementation 'org.xerial:sqlite-jdbc:3.49.1.0'
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");
		def platformRoot = new File("C:/Android/android-sdk/platforms").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}
        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")
		System.out.println("Starting d8: $dependencies");
        //dex and desugar files - this requires d8 in your PATH
        "d8.bat $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
		System.out.println("end d8");
    }
}

jar{
    archiveFileName = "config/mods/${project.archivesBaseName}.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE 

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(projectDir){
        include "plugin.json"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
